package chapter06;  
// 패키지 선언: 클래스를 논리적으로 묶어 네임스페이스를 구성합니다.

/*
 * 향상된 for문(enhanced for loop, foreach)
 * - 자바 5부터 지원되는 반복문
 * - 배열 또는 컬렉션(List 등)의 요소를 순차적으로 읽기만 할 때 사용
 * - 인덱스 접근이 필요 없는 경우 코드가 간결해집니다
 */
public class JAVA0604ArrayOfFor {                    
    // 클래스 선언: 배열 순회 예제용 메인 구조체

    public static void main(String[] args) {     
        // 메인 메서드: 프로그램 진입점이자 실행 시작점

        // --- 1. 배열 선언 및 초기화 ---
        int[] nlist = {1, 2, 3, 4, 5};           
        // 정수형 배열 선언과 동시에 5개의 값을 초기화
        // 배열은 연속된 메모리 공간에 값이 저장됩니다

        // --- 2. 일반 for문을 이용한 배열 순회 ---
        // 인덱스를 직접 제어할 수 있어 요소 건너뛰기, 역순 순회 등에도 활용 가능
        for (int i = 0; i < nlist.length; i++) { 
            // i = 0부터 nlist.length-1까지 반복
            System.out.print(nlist[i] + "\t");   
            // nlist[i]로 배열 요소에 접근해 값 출력 후 탭 문자 삽입
        }                                        
        System.out.println();                    
        // 줄바꿈: 다음 출력을 새 줄에서 시작

        // --- 3. 향상된 for문을 이용한 배열 순회 ---
        // 인덱스 없이 각 요소의 값을 순차적으로 읽기만 할 때 유용
        for (int number : nlist) {               
            // nlist 배열의 각 요소를 number 변수에 순차 할당
            System.out.print(number + "\t");     
            // 현재 요소 값 출력 후 탭 문자 삽입
        }                                        
        System.out.println();                    
        // 줄바꿈: 출력 완료 후 새 줄로 이동
	
        // ------------------------------------------------------------------
        // --- 4. 학습용 주석 처리된 예시 비교 ---
        // ------------------------------------------------------------------
	
        /*
        // [예시 3] while문으로 배열 순회
        // int idx = 0;
        // while (idx < nlist.length) {
        //     System.out.print(nlist[idx] + "\t");
        //     idx++;
        // }
        // System.out.println();
        //
        // -- 해설 --
        // while문은 조건만 주고 반복동작을 제어합니다.
        // 초기값 설정, 증감식, 조건을 직접 관리해야 하므로
        // for문보다 코드가 다소 장황해질 수 있습니다.
        */
	
        /*
        // [예시 4] 컬렉션(List)에서 향상된 for문 사용
        // List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
        // for (int num : list) {
        //     System.out.print(num + "\t");
        // }
        // System.out.println();
        //
        // -- 해설 --
        // 배열뿐 아니라 List, Set 같은 Iterable을 구현한 컬렉션에서도
        // 향상된 for문을 동일하게 사용할 수 있습니다.
        */
    }                                           
}
//
//
//
//  학습 포인트
//	
//  1. 일반 for문 vs. 향상된 for문
//	 - 일반 for문은 인덱스를 직접 제어할 수 있어 순회 방식에 유연성이 높습니다.
//	 - 향상된 for문은 읽기 전용 순회에 최적화되어 코드가 간결해집니다.
//	
//  2. while문과 비교
//	 - while문은 반복 조건만 제공하므로 초기값, 증감식, 종료 조건을 직접 관리해야 합니다.
//	
//  3. 배열과 컬렉션의 호환성
//	 - 향상된 for문은 배열뿐 아니라 Iterable을 구현한 모든 컬렉션에도 동일하게 적용할 수 있습니다.
//	
//  4. 메모리 구조 이해
//	 - 배열은 연속된 메모리에 요소가 저장되며, nlist.length로 길이를 조회할 수 있습니다.
//	
//  5. 코드 가독성 및 유지보수
//	 - 요소만 순회할 땐 향상된 for문을, 인덱스 제어나 복잡한 흐름 제어가 필요할 땐 일반 for문을 사용하는 것이 좋습니다.
//
//
//