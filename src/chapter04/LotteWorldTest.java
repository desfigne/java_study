package chapter04; // 이 파일이 속한 패키지를 정의함 (폴더 구조와 일치)

import java.util.Scanner; // 사용자 입력을 받기 위해 Scanner 클래스를 import함

public class LotteWorldTest { // 클래스 정의 시작

	public static void main(String[] args) { // main 메서드 - 프로그램 실행 시작 지점

		// AND(&&) : 두 조건 모두 true일 때 전체 결과가 true
		// OR(||) : 두 조건 중 하나라도 true면 전체 결과가 true
		// NOT(!) : 조건 결과를 반대로 뒤집음 (true → false, false → true)

		// 놀이기구 탑승 전 체크사항
		// 1. 6세 이상 탑승 가능 (단, 6세 이하는 키가 120cm 이상이고 보호자 동반 시 가능)
		// 2. 키 120cm 이상 탑승 가능
		// 3. 심장질환자는 탑승 불가

		Scanner input = new Scanner(System.in); // 사용자 입력을 받을 Scanner 객체 생성

		// 지역변수 선언 (사용 전 반드시 초기화가 필요)
		String name = ""; // 이름을 저장할 변수 (초기값은 빈 문자열)
		int age = 0, height = 0; // 나이와 키 변수 선언 및 0으로 초기화
		boolean parent = false, dease = false; // 보호자 동반 여부, 심장질환 여부 초기값 false

		System.out.println("*************************"); // 안내 출력
		System.out.println("놀이기구 탑승전 유의사항 및 체크"); // 안내 제목 출력
		System.out.println("*************************"); // 안내 출력

		System.out.print("이름 > "); // 사용자에게 이름 입력 요청
		name = input.next(); // 입력받은 이름을 name 변수에 저장

		System.out.print("나이 > "); // 사용자에게 나이 입력 요청
		age = input.nextInt(); // 입력받은 정수를 age 변수에 저장

		System.out.print("신장 > "); // 사용자에게 키 입력 요청
		height = input.nextInt(); // 입력받은 정수를 height 변수에 저장

		System.out.print("부모님 동반(동반O:1, 동반X:0) > "); // 보호자 동반 여부 입력 요청
		parent = (input.nextInt() == 1) ? true : false; // 1이면 true, 0이면 false로 변환하여 parent 변수에 저장

		System.out.print("심장 질환(유:1, 무:0) > "); // 심장 질환 여부 입력 요청
		dease = (input.nextInt() == 1) ? true : false; // 1이면 true (질환 있음), 0이면 false로 저장

//		System.out.println(name + "," + age + "," + height + "," + parent + "," + dease); // 디버깅용 출력 (주석 처리됨)

		// 탑승 가능 조건 확인
		// 조건 설명:
		// 1) (age >= 6 && height >= 120) → 6세 이상이고 키가 120cm 이상이면 OK
		// 2) (age < 6 && height >= 120 && parent == true) → 6세 미만이지만 키 120cm 이상이고 보호자 동반이면 OK
		// AND 이면서 심장질환이 없어야 하므로 마지막 조건은 dease == false
		String result = (
			((age >= 6) && (height >= 120)) || // 첫 번째 조건: 6세 이상 + 키 120 이상
			((age < 6) && (height >= 120) && (parent == true)) // 두 번째 조건: 6세 미만 + 키 120 이상 + 보호자 있음
		) && (dease == false) ? "탑승가능" : "탑승 불가능"; // 전체 조건이 맞으면 "탑승가능", 아니면 "탑승 불가능"

		System.out.println("result : " + result); // 최종 결과 출력
//
//
//
//
//		✅ 체크사항 요약과 그 의미
//		// 놀이기구 탑승 전 체크사항
//		// 1. 6세 이상 탑승 가능 (단, 6세 이하는 키가 120cm 이상이고 보호자 동반 시 가능)
//		// 2. 키 120cm 이상 탑승 가능
//		// 3. 심장질환자는 탑승 불가
//		이 세 가지 조건을 논리 연산식으로 구현하면 다음과 같은 구조로 묶입니다:
//
//		🔍 코드 구성 로직 해설
//		String result = (
//		    ((age >= 6) && (height >= 120))                   // 조건 1: 6세 이상이고 키 120 이상
//		    || 
//		    ((age < 6) && (height >= 120) && (parent == true)) // 조건 2: 6세 미만이지만 키 120 이상이고 보호자 동반
//		) 
//		&& 
//		(dease == false) ? "탑승 가능!!" : "탑승 불가능!!"; // 조건 3: 심장 질환이 없어야 최종 통과
//
//
//
//
//		🎯 구성된 순서와 묶음 설명
//		1️⃣ 기본 탑승 조건 1 (나이 + 키)

//		(age >= 6) && (height >= 120)
//		나이가 6세 이상이고
//
//		키가 120cm 이상이면 → 탑승 가능
//
//		✔ 최우선 조건: 일반적인 탑승 조건
//
//		2️⃣ 예외적 허용 조건 (보호자 동반)

//		(age < 6) && (height >= 120) && (parent == true)
//		나이가 6세 미만이지만
//
//		키가 120cm 이상이고
//
//		보호자가 동반했다면 → 예외적으로 탑승 가능
//
//		✔ 조건 1의 예외 케이스 처리
//
//		🔄 위 두 가지를 OR(||)로 묶음

//		((age >= 6) && (height >= 120)) 
//		|| 
//		((age < 6) && (height >= 120) && (parent == true))
//		둘 중 하나라도 만족하면 탑승 가능성 있음
//
//		3️⃣ 최종 필터: 심장 질환 여부

//		&& (dease == false)
//		심장 질환이 없어야만 실제 탑승 가능
//
//		아무리 다른 조건을 만족해도 심장질환이 있으면 무조건 불가
//
//		✔ 이 부분이 탑승 가능 여부의 최종 게이트
//
//		4️⃣ 삼항 연산자로 결과 출력

//		? "탑승 가능!!" : "탑승 불가능!!"
//		위 조건이 true면 → "탑승 가능!!"
//
//		아니면 → "탑승 불가능!!"
//
//
//
//
//		🧩 전체 구조 요약
//		단계	조건 내용	코드 표현	역할
//		1	기본 조건: 6세 이상 + 키 120 이상	(age >= 6) && (height >= 120)	일반적 탑승 허용
//		2	예외 조건: 6세 미만 + 키 120 이상 + 보호자	(age < 6) && (height >= 120) && parent	예외적 탑승 허용
//		3	질병 조건: 심장질환 없음	&& (dease == false)	최종 탑승 허용 여부
//		4	결과 선택	삼항연산자 ? :	"탑승 가능" 또는 "불가능" 출력
//
//
//
//
//		✅ 결론
//		이 코드는 복합적인 조건을 순서대로 논리적으로 묶은 구조로,
//		먼저 기본/예외 조건을 OR로 처리해 탑승 가능성을 확인하고,
//		마지막에 심장질환 조건을 AND로 추가해 실제 탑승 가능 여부를 최종 판단하는 방식입니다.
	}

}
