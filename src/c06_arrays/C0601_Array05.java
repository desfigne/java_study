package c06_arrays;  
// 패키지 선언: 클래스를 논리적으로 묶어 네임스페이스를 구성합니다.

public class C0601_Array05 {
    // 클래스 선언: 배열 사용 시 발생할 수 있는 오류 유형을 실습하는 예제

    public static void main(String[] args) {
        // --- 1. 배열 선언 및 기본값 확인 ---
        int[] nlist = new int[3];
        // new int[3]을 통해 길이 3인 정수형 배열 생성
        // int 배열의 각 요소는 기본값 0으로 초기화됩니다

        // --- 2. 잘못된 대입 예시 (컴파일 오류) ---
        // 아래 코드는 주석 처리되어 있습니다.
        // String 타입을 배열 전체(nlist) 또는 요소(nlist[0])에 대입하려고 하면
        // “Type mismatch” 컴파일 오류가 발생합니다.
        // nlist = "1";       // 컴파일 에러: 배열 참조 타입과 할당 타입 불일치
        // nlist[0] = "1";    // 컴파일 에러: int 변수에 String 할당 불가

        // --- 3. 잘못된 인덱스 사용 예시 (런타임 오류) ---
        // 배열 길이를 벗어난 인덱스(3 이상)에 접근하면
        // 실행 중 ArrayIndexOutOfBoundsException이 발생합니다.
        // nlist[3] = 99;     // 런타임 에러: 인덱스 3은 유효 범위(0~2) 밖

        // --- 4. 올바른 요소 대입 ---
        nlist[2] = 99;         // 인덱스 2(세 번째 요소)에 값 99 할당

        // --- 5. 배열 객체 식별자 확인 ---
        // hashCode() 호출 시 JVM이 부여한 배열 객체의 해시코드(주소 기반)를 반환
        System.out.println("배열 객체 해시코드: " + nlist.hashCode());

        // --- 6. 잘못된 순회 예시 (컴파일은 되지만 런타임 오류) ---
        // for (int i = 0; i < 5; i++) {
        //     System.out.println(nlist[i]);
        // }
        // 위 코드는 컴파일은 통과하나 i가 3,4일 때 런타임 에러 발생

        // --- 7. 안전한 배열 순회 ---
        // nlist.length를 사용해 배열의 실제 길이만큼 반복
        for (int i = 0; i < nlist.length; i++) {
            System.out.println("nlist[" + i + "] = " + nlist[i]);
        }
    }
}
//
//
//
//  학습 포인트
//
//  1. 배열 기본값
//   - int 배열 요소는 생성 시 자동으로 0으로 초기화됩니다.
//
//  2. 컴파일 오류 vs 런타임 오류
//   - Type mismatch: 잘못된 타입 대입 시 컴파일 단계에서 오류 발생.
//   - ArrayIndexOutOfBoundsException: 잘못된 인덱스 접근 시 실행 중 오류 발생.
//
//  3. 배열 길이 관리
//   - nlist.length로 배열 크기를 동적으로 참조하면 안전한 반복문 작성이 가능합니다.
//
//  4. hashCode() 활용
//   - 배열 객체 고유 식별자(메모리 주소 기반 해시코드)를 확인할 수 있습니다.
//
//  5. 예외 처리 고려
//   - 잘못된 인덱스 접근을 방지하려면 for문 조건을 항상 length 기준으로 설정하세요.
//
//
//